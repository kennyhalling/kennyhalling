---
title: "Client Report - Finding Relationships in Baseball"
subtitle: "Course DS 250"
author: "Kenneth Halling"
format:
    html:
        self-contained: true
        page-layout: full
        title-block-banner: true
        toc: true
        toc-depth: 3
        toc-location: body
        number-sections: false
        html-math-method: katex
        code-fold: true
        code-summary: "Show the code"
        code-overflow: wrap
        code-copy: hover
        code-tools:
            source: false
            toggle: true
            caption: See code
execute: 
    warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__  


```{python}
# Include and execute your code here
# idbyuid
q = '''
    SELECT CP.playerID, CP.schoolID, CP.yearID, S.teamID, S.salary
    FROM collegeplaying CP
    LEFT JOIN salaries S ON CP.playerID = S.playerID
    WHERE schoolID = 'idbyuid'
    ORDER BY S.salary DESC
    '''
table = pd.read_sql_query(q,con)
table
```


## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__  
    a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.  
    a. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.  
    a. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.  


```{python}
# Include and execute your code here
q = '''
    SELECT playerID, yearID, ROUND(H * 1.0/ AB, 3) AS batting_average
    FROM batting
    WHERE AB > 0
    ORDER BY batting_average DESC, playerID
    LIMIT 5
    '''
table = pd.read_sql_query(q,con)
table

```

```{python}
# Include and execute your code here
q = '''
    SELECT playerID, yearID, ROUND(H * 1.0/ AB, 3) AS batting_average
    FROM batting
    WHERE AB > 9
    ORDER BY batting_average DESC, playerID
    LIMIT 5
    '''
table = pd.read_sql_query(q,con)
table

```

```{python}
# Include and execute your code here
q = '''
    SELECT playerID, SUM(H) AS life_hits, SUM(AB) AS life_at_bats, ROUND(SUM(H) * 1.0/ SUM(AB), 3) AS batting_average
    FROM batting
    GROUP BY playerID
    HAVING AB > 99
    ORDER BY batting_average DESC, playerID
    LIMIT 5
    '''
table = pd.read_sql_query(q,con)
table

```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__

_I chose to compare the team rank of two baseball teams from Texas over the years: the Rangers and the Astros. Honestly, I don't know nearly enough about baseball to entirely understand what this means, but I did learn that a team with a lower rank performed better that year. Based on that, it appears that the Astros and the Rangers are pretty evenly matched, with both teams going through highs and lows, but neither remaining consistently above the other._

```{python}
# Include and execute your code here

q = '''
    SELECT yearID, name, teamRank
    FROM teams
    WHERE name="Texas Rangers" OR name="Houston Astros"
    ORDER BY yearID
    '''
table = pd.read_sql_query(q,con)
table

from lets_plot import *
LetsPlot.setup_html()

ggplot(table, aes('yearID', 'teamRank', color='name')) + \
    geom_line(size=1) + \
    geom_point(size=2) + \
    scale_y_reverse() + \
    scale_x_continuous(format="d") + \
    labs(
        title='Astros vs Rangers: Team Rank Over the Years',
        x='Year',
        y='Rank',
        color='Team'
    )
```

---

## STRETCH QUESTION|TASK 1

__Advanced Salary Distribution by Position (with Case Statement):__  

    * Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. 
    
        Include the following columns:

        * position
        * average_salary
        * total_players
        * highest_salary  

    * The highest_salary column should display the highest salary ever earned by a player in that position. 

    * Additionally, create a new column called salary_category using a case statement:  

        * If the average salary is above $3 million, categorize it as “High Salary.”
        * If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”
        * Otherwise, categorize it as “Low Salary.”  

    * Order the table by average salary in descending order.

    **Hint:** Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)[https://docs.data.world/documentation/sql/concepts/advanced/WITH.html].

    

_type your results and analysis here_

```{python}
# Include and execute your code here


```


## STRETCH QUESTION|TASK 2

__Advanced Career Longevity and Performance (with Subqueries):__

    * Calculate the average career length (in years) for players who have played at least **10 games**. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their: 

        * playerID
        * first_name
        * last_name
        * career_length

    * The career_length should be calculated as the difference between the maximum and minimum yearID for each player.  

_type your results and analysis here_

```{python}
# Include and execute your code here


```

---

